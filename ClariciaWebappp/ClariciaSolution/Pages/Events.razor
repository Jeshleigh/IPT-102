@page "/Event"
@using ProductLibrary
@using Microsoft.AspNetCore.Components.Forms

<h3>Product Form</h3>

<EditForm Model="@product" OnValidSubmit="SaveProduct">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="form-group">
        <label for="ProductName">Product Name:</label>
        <InputText id="ProductName" @bind-Value="product.Name" class="form-control" />
        <ValidationMessage For="@(() => product.Name)" />
    </div>

    <div class="form-group">
        <label for="ProductColor">Product Color:</label>
        <InputText id="ProductColor" @bind-Value="product.Color" class="form-control" />
        <ValidationMessage For="@(() => product.Color)" />
    </div>

    <div class="form-group">
        <label for="ProductPrice">Price:</label>
        <InputNumber id="ProductPrice" @bind-Value="product.Price" class="form-control" />
        <ValidationMessage For="@(() => product.Price)" />
    </div>

    <div class="form-group">
        <label for="ProductQuantity">Quantity:</label>
        <InputNumber id="ProductQuantity" @bind-Value="product.Quantity" class="form-control" />
        <ValidationMessage For="@(() => product.Quantity)" />
    </div>

    <button type="submit" class="btn btn-primary">
        @buttonLabel
    </button>
</EditForm>

<h4>Product List</h4>
<ul class="list-group">
    @foreach (var p in products)
    {
        <li class="list-group-item d-flex justify-content-between align-items-center">
            <span>@p.Name (@p.Color) - $@p.Price (Quantity: @p.Quantity)</span>
            <div>
                <button @onclick="() => UpdateProduct(p)" class="btn btn-warning btn-sm">Update</button>
                <button @onclick="() => DeleteProduct(p)" class="btn btn-danger btn-sm">Delete</button>
            </div>
        </li>
    }
</ul>

@code {
    private Product product = new Product();
    private List<Product> products = new List<Product>();
    private string buttonLabel = "Add Product";
    private Product productToUpdate = null;

    private void AddProduct()
    {
        // Add product logic
        products.Add(product);
        product = new Product(); // Reset form
    }

    private void UpdateProduct(Product product)
    {
        // Set the productToUpdate and populate the form with its values
        this.productToUpdate = product;
        this.product = new Product
            {
                Name = product.Name,
                Color = product.Color,
                Price = product.Price,
                Quantity = product.Quantity
            };
        buttonLabel = "Update Product"; // Change button label to "Update Product"
    }

    private void SaveProduct()
    {
        if (productToUpdate == null)
        {
            // Add new product
            products.Add(product);
        }
        else
        {
            // Update existing product
            var index = products.IndexOf(productToUpdate);
            if (index >= 0)
            {
                products[index] = product;
            }
        }

        productToUpdate = null; // Reset productToUpdate
        product = new Product(); // Reset form
        buttonLabel = "Add Product"; // Reset button label
    }

    private void DeleteProduct(Product product)
    {
        // Delete product logic
        products.Remove(product);
    }
}
